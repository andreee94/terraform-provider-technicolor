package technicolor

import (
	"crypto/sha1"
	"crypto/sha256"
	"crypto/sha512"
	"log"
	"math/big"
	"math/rand"
	"time"
)

func bigIntFromString(s string) *big.Int {
	n, _ := big.NewInt(0).SetString(s, 10)
	return n
}

func bigIntFromStringHex(s string) *big.Int {
	n, _ := big.NewInt(0).SetString(s, 16)
	return n
}

const (
	NG_1024   int = 1024
	NG_2048       = 2048
	NG_4096       = 4096
	NG_8192       = 8192
	NG_CUSTOM     = -1
)

const (
	SHA1   int = 0
	SHA224     = 1
	SHA256     = 2
	SHA384     = 3
	SHA512     = 4
)

var N_CONSTANTS = map[int]*big.Int{
	1024: bigIntFromStringHex(
		`EEAF0AB9ADB38DD69C33F80AFA8FC5E86072618775FF3C0B9EA2314C9C256576D674DF7496EA81D3383B4813D692C6E0E0D5D8E250B98BE48E495C1D6089DAD15DC7D7B46154D6B6CE8EF4AD69B15D4982559B297BCF1885C529F566660E57EC68EDBC3C05726CC02FD4CBF4976EAA9AFD5138FE8376435B9FC61D2FC0EB06E3`,
	),
	2048: bigIntFromStringHex(
		`AC6BDB41324A9A9BF166DE5E1389582FAF72B6651987EE07FC3192943DB56050A37329CBB4A099ED8193E0757767A13DD52312AB4B03310DCD7F48A9DA04FD50E8083969EDB767B0CF6095179A163AB3661A05FBD5FAAAE82918A9962F0B93B855F97993EC975EEAA80D740ADBF4FF747359D041D5C33EA71D281E446B14773BCA97B43A23FB801676BD207A436C6481F1D2B9078717461A5B9D32E688F87748544523B524B0D57D5EA77A2775D2ECFA032CFBDBF52FB3786160279004E57AE6AF874E7303CE53299CCC041C7BC308D82A5698F3A8D0C38271AE35F8E9DBFBB694B5C803D89F7AE435DE236D525F54759B65E372FCD68EF20FA7111F9E4AFF73`,
	),
	4096: bigIntFromStringHex(
		`FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199FFFFFFFFFFFFFFFF`,
	),
	8192: bigIntFromStringHex(
		``,
	),
}

var G_CONSTANTS = map[int]int64{
	1024: 2,
	2048: 2,
	4096: 5,
	8192: 0x13,
}

// def GetNG(ng_type, n_hex, g_hex):
//     if ng_type < NG_CUSTOM:
//         n_hex, g_hex = _ng_const[ng_type]
//     return int(n_hex, 16), int(g_hex, 16)

// func GetNG(ng_type int, n_hex *big.Int, g_hex int) (*big.Int, int) {
func GetNG(ng_type int) (n_hex *big.Int, g_hex int64) {
	if ng_type != NG_CUSTOM {
		n_hex = N_CONSTANTS[ng_type]
		g_hex = G_CONSTANTS[ng_type]
	} else {
		log.Fatalf("ng_type %v not implemented yet", ng_type)
	}
	return
}

func BytesToLong(bytes []byte) (n *big.Int) {
	n = new(big.Int)
	for _, v := range bytes {
		// n = (n << 8) | int64(v)
		n.Lsh(n, 8)
		n.Or(n, big.NewInt(int64(v)))
	}
	return n
}

func LongToBytes(n *big.Int) (bytes []byte) {
	if n.Cmp(big.NewInt(0)) == 0 {
		return []byte{}
	}

	offset := 0
	x := big.NewInt(0)

	for n.Cmp(x) != 0 {
		// b = (n >> off) & 0xFF
		b := new(big.Int).And(new(big.Int).Rsh(n, uint(offset)), big.NewInt(0xFF))
		// x = x | (b << off)
		x.Or(x, new(big.Int).Lsh(b, uint(offset)))
		bytes = append(bytes, uint8(b.Uint64()))
		offset += 8
	}

	// reverse bytes
	for i, j := 0, len(bytes)-1; i < j; i, j = i+1, j-1 {
		bytes[i], bytes[j] = bytes[j], bytes[i]
	}

	return bytes
}

func GenerateRandomBigInt(bytesSize int) (n big.Int) {
	// rand.Seed(time.Now().UnixNano())
	randomGenerator := rand.New(rand.NewSource(time.Now().UnixNano()))

	n.SetInt64(0)
	for i := 0; i < bytesSize; i++ {
		n.Lsh(&n, 8)
		n.Or(&n, big.NewInt(int64(randomGenerator.Intn(256))))
	}
	return n
}

func GenerateRandomBigIntFirstBit(bytesSize int) *big.Int {
	if bytesSize == 0 {
		return big.NewInt(0)
	}

	offset := bytesSize*8 - 1
	n := GenerateRandomBigInt(bytesSize)
	// set first bit to 1
	// get_random(nbytes) | (1 << offset)
	return new(big.Int).Or(&n, new(big.Int).Lsh(big.NewInt(1), uint(offset)))
}

func ComputeSha(content []byte, hashAlgorithm int) []byte {
	if hashAlgorithm == SHA1 {
		hash := sha1.New()
		hash.Write(content)
		return hash.Sum(nil)
	} else if hashAlgorithm == SHA224 {
		hash := sha256.New224()
		hash.Write(content)
		return hash.Sum(nil)
	} else if hashAlgorithm == SHA256 {
		hash := sha256.New()
		hash.Write(content)
		return hash.Sum(nil)
	} else if hashAlgorithm == SHA384 {
		hash := sha512.New384()
		hash.Write(content)
		return hash.Sum(nil)
	} else if hashAlgorithm == SHA512 {
		hash := sha512.New()
		hash.Write(content)
		return hash.Sum(nil)
	}
	return nil
}

func ComputeXorHashNG(hashAlgorithm int, N *big.Int, g int64) []byte {
	hashN := ComputeSha(LongToBytes(N), hashAlgorithm)
	hashG := ComputeSha(LongToBytes(big.NewInt(g)), hashAlgorithm)

	// assert len(hashN) == len(hashG)
	if len(hashN) != len(hashG) {
		log.Fatalf("len(hashN): %v != len(hashG): %v", len(hashN), len(hashG))
		return nil
	}

	hashNG := make([]byte, len(hashN))
	for i := range hashN {
		hashNG[i] = hashN[i] ^ hashG[i] // xor
	}

	return hashNG
}
